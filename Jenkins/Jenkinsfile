// Pull in default Jenkinsfile
jenkinsfileURL = "https://github.com/prichelle/apic-cd"

product = "loopback-project_1.0.0.yaml"

//Name of credential object in Jenkins
creds = "apic-apidev"

intServer = "test"
intCatalog = "prod"
intOrg = "innovative-org"
intCreds = "apic-apidev"
intRealm = "provider/default-idp-2"

node {    

    try{
        //APIC Environment variables
        load "$JENKINS_HOME/.envvars/apicenv"
        intServer = env.apichost
        
        echo "Workspace: ${env.WORKSPACE}"

        gitCheckout(env.WORKSPACE, jenkinsfileURL, creds)  

        //Publish to integration server
        deploy(intServer, intCreds, product, intCatalog, intOrg)  

    } catch(exe)
    {
        echo "${exe}"
        error("[FAILURE] Failed to publish ${product}")
    }
}    

/**
 * Clones and checks out the given Git repository branch and commit
 * @param  String workspace     Path of the working directory to use
 * @param  String url           URL of the Git repository
 * @param  String credentialsId Id of the Git credentials to use
 *  (From the credentials plugin in Cloudbees)
 */
def gitCheckout(String workspace, String url, String credentialsId) {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${credentialsId}",
                      passwordVariable: 'pass', usernameVariable: 'user']]) {

        // Checkout the code and navigate to the target directory
        int slashIdx = url.indexOf("://")
        String urlWithCreds = url.substring(0, slashIdx + 3) +
                "\"${user}:${pass}\"@" + url.substring(slashIdx + 3);        
        
        //Delete the content of the workspace and clone the source code into current directory
        sh """
            rm -rf ${workspace}/tmp
            git clone ${jenkinsfileURL} ${workspace}/tmp
            cd ${workspace}/tmp
            echo pwd && ls -l     
        """
    }
}

def deploy(String server, String creds, String product, String catalog, String org, String space = "") {
        //Login to Dev Server
        try {
            echo "Accept license"
            //sh "apic licenses --accept-license"
            echo "Attempting Login to ${server}"                     
            apic_login(server, creds)                      
        } catch(exe){
            echo "Failed to Login to ${server} with Status Code: ${exe}"
            throw exe                       
        }  

        //Publish to dev server
        //If the status code is non zero i.e. publish failed, abort the pipeline.
        //def status = apic.publish(product, catalog, org, server, space)
        stage ('Publish') {
            def status = apic_publish(product, catalog, org, server, space)
            if(status != 0) 
            {
            currentBuild.result = "FAILED"
            error("[FAILURE] Failed to publish ${product}")
            }  
        } 
        //Logout for dev server
        stage ('Logout') {
            logoutFailed = false
            try {
                //apic.logout(server)
                apic_logout(server)
                echo "Logged out of ${server}"
            } catch (exe) {
                echo "Failed to Log out with Status Code: ${exe}, check Environment manually."
                logoutFailed = true
                throw exe
            } 
        }   
}

def apic_login(String server, String creds){
    def usernameVariableLocal, passwordVariableLocal
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${creds}",
    usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {                        
        usernameVariableLocal = env.USERNAME
        passwordVariableLocal = env.PASSWORD
        
        stage ('Login') {     
        sh "apic login -s ${server} -u ${usernameVariableLocal} -p ${passwordVariableLocal} -r provider/default-idp-2 --accept-license"
        } 
    } 

    echo "Successfully Logged In:  ${usernameVariableLocal}@${server}"
}


def apic_logout(String server){
    sh "apic logout -s ${server}"
}

//Publish to Catalog or Space
def apic_publish(String product, String catalog, String org, String server, String space = ""){
    echo "Publishing product ${product}"
        if (!space.trim()) {
            def status = sh script: "apic products:publish  -c ${catalog} -o ${org} -s ${server} --scope catalog tmp/${product} ", 
                returnStatus: true  
            return status  
        }
        else {
        def status = sh script: "apic products:publish  -c ${catalog} -o ${org} -s ${server} --space ${space} --scope space tmp/${product} ", 
            returnStatus: true  
        return status     
        }  
} 
